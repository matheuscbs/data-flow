version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:6.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_SUPERUSERS: User:admin
      KAFKA_ALLOW_EMPTY_ACLS: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
    networks:
      - kafka-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.0
    hostname: control-center
    container_name: kafka-connect-control-center
    depends_on:
      - kafka
      - kafka-connect
      - zookeeper
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 3
      CONTROL_CENTER_STREAMS_COMMIT_INTERVAL_MS: 5000
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: DEBUG

      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    networks:
      - kafka-network

  kafka-connect:
    image: cnfldemos/cp-server-connect-datagen:0.4.0-6.0.0
    hostname: connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - mongo
      - hadoop
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_PRODUCER_CONFIG: SASL_MECHANISM=PLAIN
      CONNECT_CONSUMER_CONFIG: SASL_MECHANISM=PLAIN
      CONNECT_USER: kafka_user
      CONNECT_PASSWORD: kafka_password
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_HDFS_URL: "hdfs://hadoop-namenode:8020"
    command:
      - bash
      - -c
      - |
        echo "Installing MongoDB connector Source"
        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:latest
        echo "Installing MongoDB Sink connector"
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest
        echo "Installing HDFS Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-hdfs:latest
        echo "Starting Kafka Connect"
        /etc/confluent/docker/run
    networks:
      - kafka-network

  setup-kafka-mongo:
    build:
      context: .
      dockerfile: Dockerfile.kafka-mongo-setup
    container_name: setup-kafka-mongo
    depends_on:
      - kafka-connect
      - kafka
      - zookeeper
      - mongo
    volumes:
      - ./setup-kafka-mongo.sh:/app/setup-kafka-mongo.sh
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_BROKER: "kafka:29092"
      MONGO_URI: "mongodb://mongo:27017"
      TOPIC_NAME: "spark-etl-topic"
      CONNECT_URI: "http://connect:8083"
    command: >
      /bin/bash -c "chmod +x /app/setup-kafka-mongo.sh &&
                    sleep 10 &&
                    /app/setup-kafka-mongo.sh"
    networks:
      - kafka-network

  mongo:
    image: mongo
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - kafka-network

  hadoop:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    hostname: namenode
    container_name: hadoop-namenode
    environment:
      - CLUSTER_NAME=test
    volumes:
      - hadoop_data_namenode:/hadoop/dfs/name
    ports:
      - "9870:9870"
      - "9000:9000"
      - "8020:8020"
    networks:
      - kafka-network

  spark:
    image: bitnami/spark:3
    hostname: spark-master
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - kafka-network

  data-flow:
    build:
      context: .
      dockerfile: Dockerfile.data-flow
    container_name: data-flow
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER: "kafka:9092"
      TOPIC_NAME: "spark-etl-topic"
      FTP_URL: "https://people.sc.fsu.edu/~jburkardt/data/csv/hw_200.csv"
      API_URL: "https://jsonplaceholder.typicode.com/posts"
      WIKI_URL: "https://en.wikipedia.org/wiki/List_of_programming_languages"
      PYSPARK_PYTHON: "/usr/local/bin/python"
      PYSPARK_DRIVER_PYTHON: "/usr/local/bin/python"
    volumes:
      - ./app:/app
      - ./logs:/var/log
    networks:
      - kafka-network
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

networks:
  kafka-network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  hadoop_data_namenode:
    driver: local
