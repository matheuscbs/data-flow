version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - kafka-network
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "ruok",
          "|",
          "nc",
          "localhost",
          "2181",
          "|",
          "grep",
          "imok",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-server:7.3.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_MESSAGE_MAX_BYTES: "200000000"
      KAFKA_REPLICA_FETCH_MAX_BYTES: "210000000"
      KAFKA_SOCKET_REQUEST_MAX_BYTES: "300000000"
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - kafka-network
    logging:
      driver: json-file
      options:
        max-size: "200m"
        max-file: "10"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8081"
    restart: always
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: "true"
    networks:
      - kafka-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - kafka-connect
      - zookeeper
    ports:
      - "9021:9021"
    restart: always
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092"
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: "connect:8083"
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: "/connectors"
      PORT: 9021
    volumes:
      - control_center_data:/var/lib/confluent-control-center
    networks:
      - kafka-network

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.1
    depends_on:
      - kafka
      - schema-registry
      - zookeeper
    ports:
      - 8082:8082
    restart: always
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    networks:
      - kafka-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:7.3.1
    hostname: connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - namenode
    ports:
      - "8083:8083"
    restart: always
    environment:
      KAFKA_JMX_PORT: 35000
      KAFKA_JMX_HOSTNAME: localhost
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      HDFS_URL: hdfs://namenode:9000
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_DEBUG: "true"
    command:
      - bash
      - -c
      - |
        echo "Installing MongoDB connector Source"
        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:latest
        echo "Installing MongoDB Sink connector"
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest
        echo "Installing HDFS Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-hdfs:latest
        echo "Starting Kafka Connect"
        /etc/confluent/docker/run
    volumes:
      - kafka_connect_data:/usr/share/java
    networks:
      - kafka-network
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "curl -s http://localhost:8083 | grep 'Kafka Connect'",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  setup-kafka-mongo:
    build:
      context: .
      dockerfile: Dockerfile.kafka-mongo-setup
    container_name: setup-kafka-mongo
    depends_on:
      - kafka-connect
      - kafka
      - zookeeper
      - mongo
    volumes:
      - ./setup-kafka-mongo.sh:/app/setup-kafka-mongo.sh
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_BROKER: "kafka:29092"
      MONGO_URI: "mongodb://admin:admin@mongo:27017"
      TOPIC_NAME: "spark-etl-topic"
      CONNECT_URI: "http://connect:8083"
    command: >
      /bin/bash -c "chmod +x /app/setup-kafka-mongo.sh &&
                    sleep 10 &&
                    /app/setup-kafka-mongo.sh"
    networks:
      - kafka-network

  mongo:
    image: mongo:4.4.6
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: power
    networks:
      - kafka-network
    depends_on:
      - zookeeper
      - kafka
      - kafka-connect
    command: >
      sh -c "mongod --fork --logpath /var/log/mongod.log --bind_ip_all &&
            sleep 10 &&
            mongo admin --eval 'db.getSiblingDB(\"admin\").getUser(\"admin\") || db.createUser({user: \"admin\", pwd: \"admin\", roles: [{role: \"root\", db: \"admin\"}]}); db = db.getSiblingDB(\"power\"); db.createCollection(\"energy\");' &&
            mongod --shutdown &&
            mongod --auth --bind_ip_all"

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    hostname: namenode
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    environment:
      - CLUSTER_NAME=test
      - TERM=xterm
    env_file:
      - ./hadoop.env
    healthcheck:
      test: ["CMD-SHELL", "hdfs dfsadmin -safemode get | grep -q OFF"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - kafka-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - kafka-network

  spark:
    image: bitnami/spark:3
    hostname: spark-master
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark_data:/bitnami/spark
    networks:
      - kafka-network

  data-flow:
    build:
      context: .
      dockerfile: Dockerfile.data-flow
    container_name: data-flow
    depends_on:
      - kafka-connect
      - kafka
      - zookeeper
      - mongo
      - namenode
      - spark
      - setup-kafka-mongo
    environment:
      KAFKA_BROKER: "kafka:29092"
      TOPIC_NAME: "spark-etl-topic"
      PYSPARK_PYTHON: "/usr/local/bin/python"
      PYSPARK_DRIVER_PYTHON: "/usr/local/bin/python"
    networks:
      - kafka-network
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"

networks:
  kafka-network:
    driver: bridge

volumes:
  zookeeper_data:
  kafka_data:
  mongo_data:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  kafka_connect_data:
  control_center_data:
  spark_data:
